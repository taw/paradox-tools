#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"

class AnalyzeIdeaGroups < EU4Analysis
  def each_idea_group
    glob("common/ideas/*").each do |path|
      parse(path).each do |name, idea_group|
        next if name == "compatibility_127"
        if @ideas == "national"
          next if idea_group["category"]
        elsif @ideas == "basic"
          next unless idea_group["category"]
        end
        yield(name, idea_group)
      end
    end
  end

  def list_of_bonuses(idea_group)
    idea_group = idea_group.to_h
    idea_group.delete "category"
    idea_group.delete "trigger"
    idea_group.delete "ai_will_do"
    idea_group.delete "free"
    idea_group.delete "important"

    result = {"all" => BonusScoring.new}
    idea_group.each do |idea_name, idea|
      result[idea_name] = BonusScoring.new
      idea.each do |k,v|
        next if k == "effect" # that's for effects of taking, it's not a bonus
        result["all"].send(k,v)
        result[idea_name].send(k,v)
      end
    end
    result
  end

  def call(show_details)
    output = []
    each_idea_group do |name, idea_group|
      bonuses = list_of_bonuses(idea_group)
      output << [bonuses["all"].score, localization(name), bonuses]
    end
    output.sort_by{|s,n,d| [-s,n]}.each do |score, name, details|
      puts "• %.2f %s" % [score, name]
      if show_details
        details.each do |idea_name, bonus|
          puts "  • %.2f %s (%s)" % [bonus.score, idea_name, bonus.to_h.map{|k,v| "#{k}: #{v}"}.join(", ")]
        end
      end
    end
  end

  def initialize(ideas, *paths)
    @ideas = ideas
    super(*paths)
  end
end

details = false
ideas = "all"
while ARGV[0] =~ /\A--(.*)/
  if $1 == "details"
    details = true
  else
    ideas = $1
  end
  ARGV.shift
end

AnalyzeIdeaGroups.new(ideas, *ARGV).call(details)
