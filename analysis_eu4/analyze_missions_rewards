#!/usr/bin/env ruby

require_relative "./eu4_analysis"

class Mission
  attr_reader :node, :effect

  def initialize(node)
    @node = node
    @effect = node["effect"]
  end

  def categorize_effect(e)
    # Key can be province id or some kind of area
    if e.val.is_a?(PropertyList)
      key_dev = ["add_base_manpower", "add_base_tax", "add_base_production"]
      key_extra = ["limit", "change_province_name", "rename_capital"]
      val_keys = e.val.keys

      if val_keys.any?{|x| key_dev.include?(x)} and
        val_keys.all?{|x| key_dev.include?(x) or key_extra.include?(x)}
        return "province development"
      end

      case val_keys
      when ["limit", "add_permanent_claim"]
        return "permaclaims"
      when ["if", "add_permanent_claim"]
        return "permaclaims"
      when ["add_permanent_claim"]
        return "permaclaims"
      when ["limit", "add_claim"]
        return "claims"
      when ["add_claim"]
        return "claims"
      when ["add_province_modifier"]
        return "province modifier"
      when ["limit", "add_province_modifier"]
        return "province modifier"
      when ["if"]
        return categorize_effect(e.val.to_a[0])
      when ["add_building"]
        return "building"
      when ["add_center_of_trade_level"]
        return "CoT level"
      when ["change_province_name", "rename_capital"]
        return []
      when ["rename_capital", "change_province_name"]
        return []
      end
    end

    case e.key
    when "tooltip", "custom_tooltip"
      []
    when "if", "else_if"
      e.val.to_a.select{|ee| ee.key != "limit"}.map{|ee| categorize_effect(ee)}
    when "else", "hidden_effect"
      e.val.to_a.map{|ee| categorize_effect(ee)}
    when "add_country_modifier"
      duration = e.val["duration"]
      if duration.is_a?(String) and duration =~ /\A\d+\z/
        duration = duration.to_i
      end
      if duration > 0
        duration /= 365.0
        if duration >= 5 and duration <= 100
          "temporary modifier" # 5-100 years, same difference
        else
          "#{duration} year modifier"
        end
      elsif duration == -1
        "indefinite modifier"
      else
        "unknown duration modifier"
      end
    when "add_building"
      "building"
    when "define_conquistador", "define_explorer", "define_admiral", "define_general",
         "create_conquistador", "create_explorer", "create_admiral", "create_general"
      "military leader"
    when "add_adm_power", "add_dip_power", "add_mil_power"
      "mana"
    when "add_stability", "add_stability_or_adm_power"
      "mana" # basically
    when "add_mercantilism"
      "mana" # basically
    when "add_years_of_income"
      "gold" # scaled
    when "add_treasury"
      "gold" # flat
    when "add_prestige"
      "prestige"
    when "add_imperial_influence"
      "HRE IA"
    when "change_innovativeness", "add_innovativeness_big_effect"
      "innovativeness"
    when "add_mandate"
      "Chinese mandate"
    when "add_permanent_claim"
      "permaclaim"
    when "add_claim"
      "claims"
    when "add_yearly_sailors"
      "sailors"
    when "add_yearly_manpower"
      "manpower"
    when "define_advisor"
      "advisor"
    when "add_estate_loyalty", "add_estate_loyalty_modifier", "add_estate_jains_loyalty_effect", "add_estate_nobles_loyalty_effect", "add_estate_rajput_loyalty_effect"
      "estate_loyalty"
    when "add_harmonization_progress"
      "harmonization_progress"
    when "add_horde_unity", "add_meritocracy", "add_legitimacy", "increase_legitimacy_small_effect"
      "legitimacy/etc."
    when "add_army_tradition", "add_navy_tradition"
      "military tradition"
    when "add_karma"
      "karma"
    when "add_casus_belli"
      e.val["type"]
    when "add_piety"
      "piety"
    when "add_patriarch_authority"
      "patriarch_authority"
    when "add_papal_influence"
      "papal_influence"
    when "set_government_rank"
      "government rank"
    when "add_accepted_culture"
      "accepted culture"
    when "change_government_reform_progress"
      "reform progress"
    else
      p e
      # if e.inspect =~ /province_modifier/
      #   binding.pry
      # end

      "unknown"
    end
  end

  def effect_types
    effect.to_a.map do |e|
      categorize_effect(e)
    end.flatten.uniq.sort
  end
end

class AnalyzeMissionRewards < EU4Analysis
  def each_mission_file(&block)
    glob("missions/*").each do |path|
      yield parse(path)
    end
  end

  def each_mission(&block)
    each_mission_file do |node|
      node.each do |group_name, group|
        group.each do |name, mission|
          next if %W[
            ai
            generic
            has_country_shield
            potential
            potential_on_load
            slot
          ].include?(name)
          yield(Mission.new(mission))
        end
      end
    end
  end

  def call
    totals = Hash.new(0)
    each_mission do |mission|
      totals["total missions"] += 1
      mission.effect_types.each do |t|
        totals["total effects"] += 1
        totals[t] += 1
      end
    end
    pp totals.sort_by(&:last).to_h
  end
end

AnalyzeMissionRewards.new_from_argv.call
