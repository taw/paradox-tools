#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"
require_relative "../eu4/partial_evaluator"
require "paint"

class PartialEvaluatorGreatProjects < PartialEvaluator
  def eval_property(node)
    return always_false if node.key == "AND" and node.val.keys.sort == ["culture", "has_owner_culture"]
    node = super(node)
    case node.key
    when "has_owner_religion", "has_owner_accepted_culture", "province_is_or_accepts_culture"
      return always_true if node.val == true
    when "culture", "culture_group"
      return always_true
    when "secondary_religion"
      return always_false
    when "province_is_or_accepts_religion_group", "province_is_or_accepts_religion"
      if node.val.size == 1
        return node.val.to_a[0]
      end
    when "owner"
      # Not religion specific
      return always_false if node.val.include?(always_false)
    when "custom_trigger_tooltip"
      # Not religion specific, this could be much better
      if node.val.keys.sort == ["OR", "tooltip"]
        return node.val.to_a.find{|a| a.key == "OR"}
      end
    when "has_harmonized_with"
      return always_false # this one might be always_true instead?
    end
    node
  end
end

# Ignore trivial conditions
class PartialEvaluatorDeitiesAndCults < PartialEvaluator
  def eval_property(node)
    node = super(node)
    case node.key
    when "has_unlocked_cult", "mission_completed"
      return always_true
    end
    node
  end
end

def bonus_score(bonuses)
  BonusScoring.new(bonuses).score
end

class ReligionGroup
  attr_reader :name, :node
  attr_accessor :religions, :religious_schools

  def initialize(name, node)
    @name = name
    @node = node
    @religions = []
    @religious_schools = nil
  end

  def uses_religious_schools?
    !@religious_schools.empty?
  end

  # Not all are actually pickable, and most countries just start with one
  def each_school_bonus
    @religious_schools.each do |school_name, school|
      bonuses = {}
      school.each do |k, v|
        next if %W[
          potential_invite_scholar
          can_invite_scholar
          on_invite_scholar
          invite_scholar_modifier_display
          picture
        ].include?(k)
        bonuses[k] = v
      end
      yield school_name, bonuses
    end
  end
end

class Religion
  attr_reader :analysis, :group, :name, :node
  attr_accessor :deities, :reforms, :cults, :monuments

  def initialize(analysis, group, name, node)
    @analysis = analysis
    @group = group
    @name = name
    @node = node
    @deities = {}
    @cults = {}
    @reforms = {}
    @monuments = {}
    # It really belongs there
    if @node["declare_war_in_regency"]
      @node["country"].add! "declare_war_in_regency", true
    end
    unknown_keys_warning!
  end

  def color
    @node["color"]
  end

  def has_religious_schools?
    @group.uses_religious_schools?
  end

  def uses_ancestors?
    !!@node["ancestors"]
  end

  def uses_piety?
    !!@node["uses_piety"]
  end

  def has_secondary?
    @node["can_have_secondary_religion"]
  end

  def uses_isolationism?
    !!@node["uses_isolationism"]
  end

  def uses_karma?
    !!@node["uses_karma"]
  end

  def has_deities?
    !@deities.empty?
  end

  def uses_doom?
    !!@node["doom"]
  end

  def uses_authority?
    !!@node["authority"]
  end

  def uses_papacy?
    !!@node["papacy"]
  end

  def fetishist_cult?
    !!@node["fetishist_cult"]
  end

  def aspect_names
    @node["aspects"]
  end

  def uses_aspects?
    !!aspect_names
  end

  def aspects
    @aspects ||= aspect_names.map{|n| [n, @analysis.aspects[n]] }.select{|k,v| v}.to_h
  end

  def blessing_names
    @node["blessings"]
  end

  def uses_blessings?
    !!blessing_names
  end

  def uses_fervor?
    !!@node["fervor"]
  end

  def blessings
    @blessings ||= blessing_names.map{|n| [n, @analysis.aspects[n]] }.to_h
  end

  def deity_score(deity_name)
    bonus_score @deities[deity_name]
  end

  def primary_score
    bonus_score @node["country"]
  end

  def secondary_score
    bonus_score @node["country_as_secondary"]
  end

  def has_reforms?
    !@reforms.empty?
  end

  def orthodox_icons
    @node["orthodox_icons"]
  end

  def uses_harmony?
    !!@node["uses_harmony"]
  end

  def unknown_keys_warning!
    known_keys = %W[
      allowed_center_conversion
      allow_female_defenders_of_the_faith
      allowed_conversion
      ancestors
      aspects
      aspects_name
      authority
      blessings
      can_have_secondary_religion
      color
      country
      country_as_secondary
      date
      declare_war_in_regency
      doom
      fervor
      fetishist_cult
      flag_emblem_index_range
      flags_with_emblem_percentage
      harmonized_modifier
      has_patriarchs
      heretic
      holy_sites
      hre_heretic_religion
      hre_religion
      icon
      misguided_heretic
      on_convert
      orthodox_icons
      papacy
      personal_deity
      province
      reform_tooltip
      religious_reforms
      uses_anglican_power
      uses_church_power
      uses_harmony
      uses_hussite_power
      uses_isolationism
      uses_karma
      uses_piety
      will_get_center
    ]
    unknown_keys = @node.keys - known_keys

    unless unknown_keys.empty?
      puts "#{name} - #{unknown_keys.join(", ")}"
    end
  end

  def each_school_bonus
    # This is not directly in game files, just in event that lets you pick school when you change religion to Muslim
    sunni_schools = ["hanafi_school", "hanbali_school", "maliki_school", "shafii_school"]
    shiite_schools = ["ismaili_school", "jafari_school", "zaidi_school"]
    group.each_school_bonus do |school_name, school_bonus|
      if name == "sunni"
        next unless sunni_schools.include?(school_name)
      end
      if name == "shiite"
        next unless shiite_schools.include?(school_name)
      end
      yield(school_name, school_bonus)
    end
  end

  def each_icon
    orthodox_icons.each do |icon_name, icon|
      bonus = {}
      icon.each do |k,v|
        next if %W[allow ai_will_do].include?(k)
        bonus[k] = v
      end
      yield(icon_name, bonus)
    end
    yield("No Icon", {})
  end

  def each_piety
    @analysis.piety.each do |name, bonus|
      yield(name, bonus)
    end
    yield("Neutral Piety", {})
  end

  def each_variant(&blk)
    monument_score, monument_names = choose_best_n_options(@monuments, @monuments.size)
    each_variant_without_monuments do |secondary_name, secondary_score|
      yield(secondary_name, secondary_score)
      unless @monuments.empty?
        yield(
          ["Monuments (#{monument_names.join(", ")})", *secondary_name],
          (secondary_score + monument_score).round(6)
        )
      end
    end
  end

  def each_variant_without_monuments
    # Tengri
    if has_secondary?
      @analysis.religions.each do |secondary_name, secondary_religion|
        next if secondary_name == name
        yield(
          localization(secondary_name),
          secondary_religion.secondary_score
        )
      end
      return
    end

    # Hindu, Norse
    if has_deities?
      deities.each do |deity_name, deity|
        yield(
          localization(deity_name),
          primary_score + deity_score(deity_name)
        )
      end
      return
    end

    # Shinto
    if uses_isolationism?
      @analysis.isolationism.each do |level_name, level_number, bonus|
        yield(
          "#{localization(level_name)} (#{level_number})",
          primary_score + bonus_score(bonus)
        )
      end
      return
    end

    # Buddhist variants
    if uses_karma?
      @analysis.karma.each do |karma_name, karma_bonus|
        yield(
          localization(karma_name),
          primary_score + bonus_score(karma_bonus)
        )
      end
      return
    end

    # Islam
    # assume uses_piety and religious_schools belong together,
    # otherwise I'd need to have complex recursion setup here
    if uses_piety?
      each_school_bonus do |school_name, school_bonus|
        each_piety do |piety_name, piety_bonus|
          yield(
            [localization(school_name), localization(piety_name)].compact,
            primary_score + bonus_score(school_bonus) + bonus_score(piety_bonus)
          )
        end
      end
      return
    end

    # Anglican (except it does nothing), Protestant, Hussite
    if uses_aspects?
      best_score, best_names = choose_best_n_options(aspects, 3)
      yield(
        best_names,
        primary_score + best_score
      )
      return
    end

    # Coptic, Zoroastrian
    if uses_blessings?
      (0..blessings.size).each do |i|
        best_score, best_names = choose_best_n_options(blessings, i)
        yield(
          best_names,
          primary_score + best_score
        )
      end
      return
    end

    # Fetishism, Alcheringa
    if fetishist_cult?
      @cults.each do |cult_name, cult_bonus|
        yield(
          localization(cult_name),
          primary_score + bonus_score(cult_bonus)
        )
      end
      return
    end

    # Maya, Inti, Nahuatl
    if has_reforms?
      (0..reforms.size).each do |i|
        best_score, best_names = choose_best_n_options(reforms, i)
        if uses_doom?
          # Nahuatl
          yield(
            ["0% Doom", *best_names],
            primary_score + best_score
          )
          yield(
            ["50% Doom", *best_names],
            primary_score + best_score + bonus_score(@analysis.doom) * 0.5
          )
          yield(
            ["100% Doom", *best_names],
            primary_score + best_score + bonus_score(@analysis.doom)
          )
        elsif uses_authority?
          # Inti
          yield(
            ["0% Authority", *best_names],
            primary_score + best_score
          )
          yield(
            ["50% Authority", *best_names],
            primary_score + best_score + bonus_score(@analysis.authority) * 0.5
          )
          yield(
            ["100% Authority", *best_names],
            primary_score + best_score + bonus_score(@analysis.authority)
          )
        else
          # Maya
          yield(
            best_names,
            primary_score + best_score
          )
        end
      end
      return
    end

    # Catholic
    # There are a bunch of extra mechanics, so this score is unfairly low
    if uses_papacy?
      yield(nil, primary_score)
      yield("Curia Controller", primary_score + bonus_score(@analysis.curia_controller))
      return
    end

    # Orthodox
    # Assume orthodox_icons and has_patriarchs go together
    # Also assume you get 100% global and 50% local bonus (your lands are 50% Orthodox)
    if orthodox_icons
      patriarch_score = 0.5 * bonus_score(@analysis.patriarch_authority_local) + bonus_score(@analysis.patriarch_authority_global)
      each_icon do |icon_name, icon|
        yield(
          ["0% Patriarchy", localization(icon_name)],
          primary_score + bonus_score(icon)
        )

        yield(
          ["50% Patriarchy", localization(icon_name)],
          primary_score + bonus_score(icon) + 0.5 * patriarch_score
        )

        yield(
          ["100% Patriarchy", localization(icon_name)],
          primary_score + bonus_score(icon) + patriarch_score
        )

      end
      return
    end

    # Confucian
    if uses_harmony?
      harmonized_bonus = @analysis.harmonized.values.map{|h| bonus_score(h) }.sum
      harmony = {
        "High Harmony" => bonus_score(@analysis.harmony["high_harmony"]),
        "Neutral Harmony" => 0,
        "Low Harmony" => bonus_score(@analysis.harmony["low_harmony"]),
      }

      harmony.each do |harmony_name, harmony_value|
        yield(
          [harmony_name, "All Harmony Bonuses"],
          primary_score + harmony_value + harmonized_bonus
        )

        yield(
          harmony_name,
          primary_score + harmony_value
        )
      end

      return
    end

    # Reformed
    if uses_fervor?
      @analysis.fervor.each do |fervor_name, fervor_bonus|
        yield(
          localization(fervor_name),
          primary_score + bonus_score(fervor_bonus)
        )
      end

      yield(
        "No Fervor",
        primary_score
      )
      return
    end

    # Sikh (pre 1.31; 1.31 not implemented yet!)
    # these are event modifiers so we hardcode it
    if name == "sikhism"
      @analysis.gurus.each do |guru_name, guru_bonus|
        yield(
          "#{localization(guru_name)}",
          primary_score + bonus_score(guru_bonus)
        )
      end

      yield("No Guru", primary_score)

      return
    end

    # Totemism
    if uses_ancestors?
      (0..10).each do |i|
        best_score, best_names = choose_best_n_options(@analysis.ancestors, i)
        yield(
          best_names,
          primary_score + best_score
        )
      end
      return
    end

    # Default - Jewish, Animist
    yield(nil, primary_score)
  end

  def choose_best_n_options(options, count)
    ranked = options.map{|on,o| [bonus_score(o), on] }.sort.reverse
    [
      ranked[0, count].map(&:first).sum,
      ranked[0, count].map(&:last).map{|n| localization(n) },
    ]
  end

  def localization(q)
    @analysis.localization(q)
  end
end

class AnalyzeReligions < EU4Analysis
  attr_reader(
    :ancestors,
    :aspects,
    :authority,
    :curia_controller,
    :doom,
    :fervor,
    :gurus,
    :harmonized,
    :harmony,
    :isolationism,
    :karma,
    :patriarch_authority_global,
    :patriarch_authority_local,
    :piety,
    :religions,
  )

  def initialize(*)
    super
    @ancestors = {}
    @aspects = {}
    @fervor = {}
    @groups = {}
    @gurus = {}
    @harmonized = {}
    @harmony = {}
    @isolationism = []
    @karma = {}
    @piety = {}
    @religions = {}
  end

  def parse_static_bonuses
    parse("common/religions/00_religion.txt").each do |group_name, group_node|
      group = @groups[group_name] = ReligionGroup.new(group_name, group)

      group_node.each do |religion_name, religion|
        next unless religion.is_a?(PropertyList)
        if religion_name == "religious_schools"
          group.religious_schools = religion
          next
        end

        @religions[religion_name] = Religion.new(self, group, religion_name, religion)
        @groups[group_name].religions << @religions[religion_name]
      end
    end
  end

  def parse_deity
    glob("common/personal_deities/*.txt").each do |path|
      parse(path).each do |deity_name, deity|
        bonuses = {}
        deity.each do |k, v|
          next if %W[ai_will_do sprite allow].include?(k)
          bonuses[k] = v
        end
        pe = PartialEvaluatorDeitiesAndCults.new
        allow = pe.call(PropertyList["AND", deity["allow"]])
        allow.each do |k,v|
          if k == "religion"
            @religions[v].deities[deity_name] = bonuses
          else
            raise
          end
        end
      end
    end
  end

  def parse_isolationism
    glob("common/isolationism/*.txt").each do |path|
      parse(path).each do |level_name, level|
        @isolationism << [level_name, level["isolation_value"], level["modifier"]]
      end
    end
  end

  def parse_cults
    glob("common/fetishist_cults/*.txt").each do |path|
      parse(path).each do |cult_name, cult|
        bonuses = {}
        cult.each do |k, v|
          next if %W[ai_will_do sprite allow].include?(k)
          bonuses[k] = v
        end
        pe = PartialEvaluatorDeitiesAndCults.new
        allow = pe.call(PropertyList["AND", cult["allow"]])
        if allow == PropertyList["always", true]
          # 1.30 had this
          allowed_religion = "shamanism"
        elsif allow.keys == ["religion"]
          # 1.31+
          allowed_religion = allow["religion"]
        elsif allow["AND"] and allow["AND"]["religion"]
          # 1.32+
          allowed_religion = allow["AND"]["religion"]
        else
          raise
        end

        @religions[allowed_religion].cults[cult_name] = bonuses
      end
    end
  end

  def parse_static_modifiers
    node = parse("common/static_modifiers/00_static_modifiers.txt")
    @karma["karma_just_right"] = node["karma_just_right"]
    @karma["karma_too_high"] = node["karma_too_high"]
    @karma["karma_too_low"] = node["karma_too_low"]
    @piety["positive_piety"] = node["positive_piety"]
    @piety["negative_piety"] = node["negative_piety"]
    @harmony["high_harmony"] = node["high_harmony"]
    @harmony["low_harmony"] = node["low_harmony"]
    @doom = node["doom"]
    @authority = node["authority"]
    @curia_controller = node["curia_controller"]
    @patriarch_authority_local = node["patriarch_authority_local"]
    @patriarch_authority_global = node["patriarch_authority_global"]
  end

  # Anglican are one-off and are not scored!
  def parse_aspects
    glob("common/church_aspects/*.txt").each do |path|
      parse(path).each do |aspect_name, aspect|
        @aspects[aspect_name] = aspect["modifier"]
      end
    end
  end

  def parse_religious_reforms
    glob("common/religious_reforms/*.txt").each do |path|
      parse(path).each do |group_name, group|
        group.each do |reform_name, reform|
          next if %W[trigger can_buy_idea ai_will_do].include?(reform_name)
          group["trigger"].each do |k,v|
            raise unless k == "religion"
            @religions[v].reforms[reform_name] = reform
          end
        end
      end
    end
  end

  def parse_fervor
    glob("common/fervor/*.txt").each do |path|
      parse(path).each do |name, bonus|
        @fervor[name] = bonus["effect"]
      end
    end
  end

  def parse_event_modifiers
    parse("common/event_modifiers/00_event_modifiers.txt").each do |name, bonus|
      if name =~ /\Aguru_/
        b = {}
        bonus.each{|k,v|
          next if k == "religion"
          b[k] = v
        }
        @gurus[name] = b
      elsif name =~ /\Aharmonized_/
        b = {}
        bonus.each{|k,v|
          next if k == "religion"
          b[k] = v
        }
        @harmonized[name] = b
      end
    end
  end

  def each_religion_variant
    @religions.each do |religion_name, religion|
      religion.each_variant do |variant_name, score|
        yield(
          score,
          [
            Paint[localization(religion.name), religion.color],
            *variant_name
          ].compact.join(" + ")
        )
      end
    end
  end

  def parse_ancestors
    glob("common/ancestor_personalities/*.txt").each do |path|
      parse(path).each do |name, ancestor|
        bonus = {}
        ancestor.each do |k,v|
          # There's a lot of AI stuff here
          next if %W[
            ai_pick_ancestor
            alliance_acceptance
            building_budget_multiplier
            chance allow
            consort_allow
            custom_ai_explanation
            different_religion_war_multiplier
            easy_war_chance_multiplier
            enemy_strength_multiplier
            fair_fights
            gift_chance
            heathen_ally_acceptance
            heir_allow
            heretic_ally_acceptance
            heretic_ally_acceptance
            knowledge_sharing
            level_factor
            nation_designer_cost
            other_ai_help_us_multiplier
            other_ai_peace_term_bonus
            other_ai_war_chance_multiplier
            peace_desire
            ruler_allow
            story_factor
            story_level
            wants_avoid_debase
            wants_avoid_loans
            wants_colonies
            wants_condottieri
            wants_ecumenical_council
            wants_excommunicate
            wants_explorers
            wants_gold
            wants_heathen_land
            wants_heretic_land
            wants_land
            war_chance_multiplier
            war_priority
          ].include?(k)
          bonus[k] = v
        end
        @ancestors[name] = bonus
      end
    end
  end

  def religions_in_rule(node)
    case node.key
    when "OR"
      node.val.to_a.flat_map{|n| religions_in_rule(n)}
    when "religion"
      [node.val]
    when "religion_group"
      # religion_group = catholic in 1.31.1 game code
      if @groups[node.val]
        @groups[node.val].religions.map(&:name)
      else
        [node.val]
      end
    when "owner"
      if node.val.keys == ["religion"]
        religions_in_rule(node.val.to_a.first)
      elsif node.val.keys == ["has_reform"]
        [] # China
      elsif node.val.keys == ["OR"] and node.val["OR"].keys == ["is_former_colonial_nation", "tag"]
        [] # USA
      else
        raise
      end
    when "province_is_buddhist_or_accepts_buddhism"
      ["buddhism"] # or...
    when "province_is_or_accepts_culture"
      []
    when "AND"
      raise unless node.val["religion"]
      node.val["religion"]
    else
      raise "Religion rule parse error: #{node.key}"
    end
  end

  def religions_required_for_monument(node)
    # We ignore all universal
    return [] if node.empty?
    pe = PartialEvaluatorGreatProjects.new
    node = pe.call(PropertyList["AND", node])
    return [] if node == PropertyList["always", true]
    raise unless node.size == 1
    religions_in_rule(node.to_a[0])
  end

  def parse_monuments
    glob("common/great_projects/*").each do |path|
      parse(path).each do |name, project|
        can_keep = project["keep_trigger"]
        can_use = project["can_use_modifiers_trigger"]
        can_upgrade = project["can_upgrade_trigger"]

        raise unless can_keep.empty?
        raise unless can_use == can_upgrade

        country_modifiers = project["tier_3"]["country_modifiers"]
        next if country_modifiers.empty?

        religions_required_for_monument(can_use).each do |religion|
          @religions[religion].monuments[name] = country_modifiers
        end
      end
    end
  end

  def call
    parse_static_bonuses

    parse_ancestors
    parse_aspects
    parse_cults
    parse_deity
    parse_event_modifiers
    parse_fervor
    parse_isolationism
    parse_religious_reforms
    parse_static_modifiers
    parse_monuments

    results = []
    each_religion_variant do |score, name|
      results << [score, name]
    end

    results.sort.reverse.each do |score, name|
      puts("#{"%.6f" % score.round(6)} - #{name}")
    end
  end
end

AnalyzeReligions.new_from_argv.call
