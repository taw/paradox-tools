#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"
require "simplex"
require "pp"

class AnalyzeCustomIdeaBonuses < EU4Analysis
  def call
    print_scores!
    [0, 50, 100, 150, 200, 300, 400, 600].each do |max_cost|
      puts ""
      puts "Simplex for cost=#{max_cost}"
      run_simplex!(max_cost)
    end
  end

  def print_scores!
    custom_ideas.each do |idea_name, idea, idea_score, levels|
      puts [idea_score, idea.inspect, levels.inspect].join("\t")
    end
  end

  def run_simplex!(max_cost)
    ideas_to_consider = custom_ideas[0,30]
    max_ideas = 10

    values  = []
    weights = []
    labels  = []
    index_ranges = []

    objective = []
    lhs = []
    rhs = []

    ideas_to_consider.each do |idea_name, idea, idea_score, levels|
      # Manually force max 1 diplomat as extra ones rapidly lose value
      if idea_name == "custom_idea_diplomats"
        levels = levels[0,1]
      end
      index_ranges << (objective.size...objective.size + levels.size)
      levels.each_with_index do |level_cost, level_i|
        objective    << (idea_score * (level_i+1)).round(3)
        weights      << level_cost
        labels       << "#{idea_name} #{level_i+1}"
      end
    end

    # Max picks
    lhs << [1] * objective.size
    rhs << max_ideas

    # Max cost
    lhs << weights
    rhs << max_cost

    # Can't pick anything > 1
    labels.size.times do |i|
      lhs << (0...labels.size).map{|u| u == i ? 1 : 0}
      rhs << 1
    end

    # Can't pick multiple choices from same bonus
    # TODO
    index_ranges.each do |range|
      lhs << (0...labels.size).map{|u| range.include?(u) ? 1 : 0}
      rhs << 1
    end

    simplex = Simplex.new(objective, lhs, rhs)
    solution = simplex.solution

    # Print solution, might not be integery
    solution_full = solution.zip(labels).zip(weights).zip(objective).map(&:flatten).select{|c,| c > 0}
    pp solution_full.map{|u,*x| [u.to_i == u ? u.to_i : u, *x]}
    puts "Total cost: #{solution_full.map{|u|u[2]*u[0]}.inject(&:+)}"
    puts "Total value: #{solution_full.map{|u|u[3]*u[0]}.inject(&:+).round(3)}"
  end

  def defines_lua
    @defines_lua ||= resolve("common/defines.lua").read.gsub(/--.*/, "").scan(/^\s+([A-Z0-9_]+)\s*=\s*(.*?)(?:\s*,|\s*$)/).to_h
  end

  def default_max_level
    @default_max_level ||= defines_lua["IDEAS_MAX_LEVEL"].to_i
  end

  def default_custom_idea_costs
    @default_custom_idea_costs ||= (1..default_max_level).map{|i|
      defines_lua["IDEAS_LEVEL_COST_#{i}"].to_i
    }
  end

  def idea_score(idea)
    BonusScoring.new.tap{|bs| idea.each{|k,v| bs.send(k,v) }}.score
  end

  def custom_ideas
    unless @custom_ideas
      @custom_ideas = []
      glob("common/custom_ideas/*").each do |path|
        parse(path).each do |subnode_name, subnode|
          subnode.each do |idea_name, idea|
            next if idea_name == "category"
            idea = idea.to_h
            idea.delete "default"
            idea.delete "chance"
            idea.delete "enabled"
            max_level = idea.delete("max_level") || default_max_level
            levels = max_level.times.map do |i|
              idea.delete("level_cost_#{i+1}") || default_custom_idea_costs[i]
            end
            @custom_ideas << [idea_name, idea, idea_score(idea), levels]
          end
        end
        @custom_ideas.sort_by!{|u| -u[2]}
      end
    end
    @custom_ideas
  end
end

AnalyzeCustomIdeaBonuses.new_from_argv.call
