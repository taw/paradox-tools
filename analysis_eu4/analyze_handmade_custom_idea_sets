#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"

class AnalyzeHandmadeCustomIdeaSets < EU4Analysis
  def defines_lua
    @defines_lua ||= resolve("common/defines.lua").read.gsub(/--.*/, "").scan(/^\s+([A-Z0-9_]+)\s*=\s*(.*?)(?:\s*,|\s*$)/).to_h
  end

  def default_max_level
    @default_max_level ||= defines_lua["IDEAS_MAX_LEVEL"].to_i
  end

  def default_custom_idea_costs
    @default_custom_idea_costs ||= (1..default_max_level).map{|i|
      defines_lua["IDEAS_LEVEL_COST_#{i}"].to_i
    }
  end

  def idea_score(idea)
    BonusScoring.new.tap{|bs| idea.each{|k,v| bs.send(k,v) }}.score
  end

  def custom_ideas
    unless @custom_ideas
      @custom_ideas = []
      glob("common/custom_ideas/*").each do |path|
        parse(path).each do |subnode_name, subnode|
          category = subnode["category"]
          subnode.each do |idea_name, idea|
            next if idea_name == "category"
            idea = idea.to_h
            idea.delete "default"
            idea.delete "chance"
            idea.delete "enabled"
            max_level = idea.delete("max_level") || default_max_level
            levels = max_level.times.map do |i|
              idea.delete("level_cost_#{i+1}") || default_custom_idea_costs[i]
            end
            # Sometimes there are levels which are not reachable like custom_own_territory_dice_roll_bonus
            (1..10).each do |i|
              idea.delete("level_cost_#{i}")
            end
            @custom_ideas << [idea_name, idea, idea_score(idea), category, levels]
          end
        end
        @custom_ideas.sort_by!{|u| -u[2]}
      end
    end
    @custom_ideas
  end

  def multiplier
    [2.0, 2.0, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 1.0, 1.0]
  end

  def custom_ideas_h
    @custom_ideas_h ||= custom_ideas.to_h{|x| [x[0], x] }
  end

  def idea_details(idea_name, level)
    data = custom_ideas_h.fetch(idea_name.to_s) # or raise "Unkown idea #{idea_name}"
    {
      bonus: data[1].to_h{|k,v| [k, v*level]},
      value: data[2] * level,
      cost: data[4][level-1],
    }
  rescue
    binding.pry
  end

  def call(header, **ideas)
    warn "Wrong size" unless ideas.size == 10
    total_cost = 0
    total_value = 0
    puts ""
    puts "#{header}"
    ideas.each_with_index do |(idea_name, level), index|
      mult = multiplier[index]
      idea = idea_details(idea_name, level)
      cost = idea[:cost] * mult
      value = idea[:value]
      bonus = idea[:bonus]
      total_cost += cost
      total_value += value
      puts "* #{idea_name} #{level} - #{bonus} (cost: #{cost}, value: #{value})"
    end
    puts "Total Cost: #{total_cost.round(3)}"
    puts "Total Value: #{total_value.round(6)}"
  end
end

ahcis = AnalyzeHandmadeCustomIdeaSets.new_from_argv
# this set is balanced
ahcis.call(
  "warmonger",
  custom_infantry_fire: 1,
  custom_infantry_shock: 1,
  custom_idea_ae_impact: 2,
  custom_idea_siege_ability: 2,
  custom_governing_capacity_modifier: 1,
  custom_yearly_army_professionalism: 1,
  custom_administrative_efficiency: 1,
  custom_idea_core_creation: 4,
  custom_warscore_cost_vs_other_religion: 2,
  custom_province_warscore_cost: 2,
)
# this set is 79.2% diplomatic so it would really fail
ahcis.call(
  "diplomat",
  custom_global_trade_goods_size: 4,
  custom_yearly_army_professionalism: 1,
  custom_governing_capacity_modifier: 1,
  custom_accept_vassalization_reasons: 2,
  custom_idea_ae_impact: 4,
  custom_idea_diplomatic_reputation: 2,
  custom_idea_diplomatic_annexation_cost: 4,
  custom_administrative_efficiency: 1,
  custom_warscore_cost_vs_other_religion: 2,
  custom_province_warscore_cost: 2,
)
ahcis.call(
  "balanced easy",
  custom_global_trade_goods_size: 4,
  custom_infantry_fire: 1,
  custom_yearly_army_professionalism: 2,
  custom_accept_vassalization_reasons: 2,
  custom_all_power_cost: 1,
  custom_reform_progress: 4,
  custom_idea_diplomatic_annexation_cost: 4,
  custom_administrative_efficiency: 2,
  custom_warscore_cost_vs_other_religion: 2,
  custom_province_warscore_cost: 2,
)
ahcis.call(
  "balanced easy 2",
  custom_global_trade_goods_size: 4,
  custom_infantry_fire: 1,
  custom_yearly_army_professionalism: 2,
  custom_reform_progress: 4,
  custom_idea_colonists: 1,
  custom_accept_vassalization_reasons: 2,
  custom_idea_diplomatic_annexation_cost: 4,
  custom_administrative_efficiency: 2,
  custom_warscore_cost_vs_other_religion: 2,
  custom_province_warscore_cost: 2,
)
