#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"

require_relative "../eu4/partial_evaluator"

# Ignore trivial conditions
class PartialEvaluatorGreatProjects < PartialEvaluator
  def eval_property(node)
    node = super(node)
    case node.key
    when "has_owner_religion", "has_owner_accepted_culture"
      return always_true if node.val == true
    end
    node
  end
end

class AnalyzeGreatProjects < EU4Analysis
  def each_great_project
    glob("common/great_projects/*").each do |path|
      parse(path).each do |name, project|
        province_number = project["start"]
        province_name = localization("PROV#{province_number}")

        can_keep = project["keep_trigger"]
        can_use = project["can_use_modifiers_trigger"]
        can_upgrade = project["can_upgrade_trigger"]

        raise unless can_keep.empty?
        raise unless can_use == can_upgrade

        yield(name, province_name, 0, project["tier_0"], parse_can_use(can_use))
        yield(name, province_name, 1, project["tier_1"], parse_can_use(can_use))
        yield(name, province_name, 2, project["tier_2"], parse_can_use(can_use))
        yield(name, province_name, 3, project["tier_3"], parse_can_use(can_use))
      end
    end
  end

  def parse_can_use(node)
    return nil if node.empty?
    pe = PartialEvaluatorGreatProjects.new
    node = pe.call(PropertyList["AND", node])
    if node.keys == ["OR"]
      node["OR"].to_a.map{|prop| parse_rule(prop.key, prop.val)}.join("/")
    elsif node.keys.size == 1
      prop = node.to_a[0]
      parse_rule(prop.key, prop.val)
    else
      binding.pry
    end
  end

  def parse_rule(key, val)
    case key
    when "religion", "religion_group", "culture", "culture_group"
      localization(val)
    when "AND"
      if val.keys.sort == ["culture", "has_owner_culture"]
        localization(val["culture"])
      else
        val.to_a.map{|prop| parse_can_use PropertyList[prop] }.map{|c| "(#{c})"}.join(" and ")
      end
    when "owner"
      if val.keys == ["religion"]
        # not quite same rule as others
        localization(val.values[0])
      elsif val == PropertyList["has_reform", "celestial_empire"]
        "Celestial Empire"
      elsif val == PropertyList["has_personal_deity", "buddha"]
        "Deity Buddha"
      elsif val == PropertyList["has_unlocked_cult", "buddhism_cult"]
        "Buddhism Cult"
      elsif val ==  PropertyList["OR", PropertyList["is_former_colonial_nation", true, "tag", "USA"]]
        "Former colonial nation or USA"
      else
        binding.pry
      end
    when "province_is_buddhist_or_accepts_buddhism"
      "Buddhist (or accepted)"
    when "province_is_or_accepts_culture"
      "accepted culture"
    else
      binding.pry
    end
  end

  def bonus_score(bonuses)
    BonusScoring.new(bonuses)
  end

  def call(show_details)
    output = []
    each_great_project do |project_name, province_name, tier, project, can_use|
      name = "#{localization(project_name)} (#{[province_name, tier, can_use].compact.join("; ")})"

      # Assuming province_modifiers and area_modidiers are irrelevant
      modifiers = project["country_modifiers"]
      next if modifiers.empty?
      score = bonus_score(modifiers)
      output << [score.score, name, modifiers]
    end
    output.sort_by{|s,n| [-s,n]}.each do |score, name, details|
      puts "• %.2f %s" % [score, name]
      if show_details
        details.each do |k, v|
          puts "  • %.2f %s (%s)" % [bonus_score(k => v).score, k, v]
        end
      end
    end
  end
end

AnalyzeGreatProjects.new_from_argv.call(true)
