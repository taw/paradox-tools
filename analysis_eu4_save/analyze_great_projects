#!/usr/bin/env ruby

require_relative "./eu4_save_analysis"
require_relative "../eu4/partial_evaluator"

# Ignore trivial conditions
class GreatProjectPlayerPartialEval < PartialEvaluator
  def initialize(analysis, save)
    @analysis = analysis
    @save = save
  end

  # Assume province is converted and its culture is accepted (generally worth it for monument)
  def eval_property(node)
    node = super(node)
    case node.key
    when "has_owner_religion", "has_owner_accepted_culture", "province_is_or_accepts_culture"
      return always_true if node.val == true
    when "religion"
      if node.val == @save.player_religion
        return always_true
      else
        return always_false
      end
    when "religion_group"
      if node.val == @analysis.player_religion_group
        return always_true
      else
        return always_false
      end
    when "province_is_buddhist_or_accepts_buddhism"
      # Hinduism / Shamanism are conditional
      if node.val == true
        if ["buddhism", "vajrayana", "mahayana", "hinduism", "shamanism"].include?(@save.player_religion)
          return always_true
        else
          return always_false
        end
      end
    when "province_is_buddhist_or_accepts_buddhism_or_is_dharmic"
      if node.val == true
        if ["buddhism", "vajrayana", "mahayana", "hinduism", "shamanism", "hinduism", "sikhism"].include?(@save.player_religion)
          return always_true
        else
          return always_false
        end
      end
    when "has_harmonized_with"
      # Just assume it can be done
      if @save.player_religion == "confucianism"
        return always_true
      else
        return always_false
      end
    when "culture", "culture_group"
      # This is about province, culture, so it's fine
      return always_true
    when "is_former_colonial_nation"
      return always_false
    when "tag"
      if node.val == @save.player_tag
        return always_true
      else
        return always_false
      end
    when "has_reform"
      # Is China, just assume false
      return always_false
    when "owner"
      return always_false if node.val == PropertyList[always_false]
      return always_true if node.val == PropertyList[always_true]
      # it's implicit AND
      return always_false if node.val["always"] == false
    when "custom_trigger_tooltip"
      if node.val.keys == ["tooltip", "OR"]
        return node.val.to_a[1]
      elsif node.val.keys == ["tooltip", "always"]
        return node.val.to_a[1]
      end
    when "province_is_or_accepts_religion_group", "province_is_or_accepts_religion"
      raise unless node.val.to_a.size == 1
      return node.val.to_a[0]
    when "has_country_flag"
      # So conditional it's unlikely
      return always_false
    when "if"
      if node.val ==  PropertyList[
          "limit", PropertyList["always", true],
          "always", true,
          "always", true,
        ]
        return always_true
      end
    end
    node
  end

  def inspect
    "#{self.class}"
  end
end

class AnalyzeGreatProjects < EU4SaveAnalysis
  def player_religion_group
    @player_religion_group ||= religion_to_religion_group[@save.player_religion]
  end

  def each_great_project
    glob("common/great_projects/*").each do |path|
      parse(path).each do |name, project|
        province_number = project["start"]
        province_name = localization("PROV#{province_number}")

        can_keep = project["keep_trigger"]
        can_use = project["can_use_modifiers_trigger"]
        can_upgrade = project["can_upgrade_trigger"]

        raise unless can_keep.empty?
        unless can_use == can_upgrade
          warn "can_upgrade for #{name} does not match can_use"
        end

        yield(name, province_name, 0, project["tier_0"], can_use)
        yield(name, province_name, 1, project["tier_1"], can_use)
        yield(name, province_name, 2, project["tier_2"], can_use)
        yield(name, province_name, 3, project["tier_3"], can_use)
      end
    end
  end

  def can_use_rules
    unless @can_use_rules
      @can_use_rules = {}
      each_great_project do |project_name, province_name, tier, project, can_use|
        @can_use_rules[project_name] ||= can_use
        raise "Inconsistent can use rules" if @can_use_rules[project_name] != can_use
      end
    end
    @can_use_rules
  end

  def monument_bonuses
    unless @monument_bonuses
      @monument_bonuses = {}
      each_great_project do |project_name, province_name, tier, project, can_use|
        @monument_bonuses[[project_name, tier]] = project["country_modifiers"]
      end
    end
    @monument_bonuses
  end

  def calculate_player_can_use(name)
    can_use = can_use_rules[name]

    @pe ||= GreatProjectPlayerPartialEval.new(self, @save)
    # It's big AND
    player_can_use = @pe.call(PropertyList["AND", can_use])

    if player_can_use == PropertyList["always", true]
      true
    elsif player_can_use == PropertyList["always", false]
      false
    else
      # MAYBE
      pp [name, can_use, player_can_use]
      player_can_use
    end
  end

  # WTF EVEN
  # None of it even works properly, especially diplomatic reputation
  def modifier_loc(key)
    return "Diplomatic Reputation" if key == "diplomatic_reputation"
    return "Sailors" if key == "global_sailors_modifier"
    return "Autonomy" if key == "global_autonomy"
    return "Tariffs" if key == "global_tariffs"
    return "Fabricate Claims Cost" if key == "fabricate_claims_cost"
    result = localization("MODIFIER_#{key.upcase}", nil) ||
    localization(key.upcase.sub("GLOBAL_", "MODIFIER_"), nil) ||
    localization(key.upcase, nil) ||
    localization(key, nil) ||
    key
    result
      .gsub(/\[Country\.Get(.*?)Name\]/) { $1 }
      .gsub("$DIRECTION$ $VALUE$ Missionaries.\n", "Missionaries")
      .gsub("$DIRECTION$ $VALUE$ Merchants.\n", "Merchants")
  end

  def call
    results = []
    player_monuments = []

    @save.great_projects.each do |name, provid, tier|
      next unless provid # canals don't have province id

      province = @save.provinces[provid]
      player_can_use = calculate_player_can_use(name)

      owner = province.owner
      if owner == @save.player_tag and player_can_use
        player_monuments << [name, province.name, tier]
      end

      results << {
        name: name,
        tier: tier,
        province_name: province.name,
        owner: localization(owner) || "no owner",
        player_can_use: player_can_use,
      }
    end

    puts "Great projects:"
    results.group_by{|r| r[:owner]}.sort_by(&:first).each do |owner, projects|
      projects.sort_by{|p| p[:name]}.each do |project|
        usability = "unknown (#{project[:player_can_use]})"
        usability = "true" if project[:player_can_use] == true
        usability = "false" if project[:player_can_use] == false
        puts "#{owner} - #{localization(project[:name])} - #{project[:province_name]} - #{project[:tier]} - #{usability}"
      end
    end

    puts ""
    puts "Player bonuses:"
    player_bonuses = {}

    player_monuments.each do |name, province_name, tier|
      monument_bonuses[[name, tier]].each do |key, val|
        nkey = modifier_loc(key)
        player_bonuses[nkey] ||= {total: 0, monuments: []}
        player_bonuses[nkey][:total] = (player_bonuses[nkey][:total] + val).round(6)
        player_bonuses[nkey][:monuments] << "#{localization(name)} #{tier}" # " in #{province_name}: #{val}"
      end
    end

    player_bonuses.sort.each do |key, val|
      puts "* #{key}: #{val[:total]} (#{val[:monuments].sort.join(", ")})"
    end
  end
end

if $0 == __FILE__
  AnalyzeGreatProjects.new_from_argv.call
end
