#!/usr/bin/env ruby

require_relative "./eu4_save_analysis"

class AnalyzeWarsBattles < EU4SaveAnalysis
  def last_war_date
    (@save.active_wars + @save.previous_wars).flat_map{|w| w["history"].keys.grep(Date)}.max
  end

  def current_date
    @current_date ||= last_war_date || start_date
  end

  def battle_type(battle)
    naval_units = ["light_ship", "heavy_ship", "transport", "galley"]
    land_units = ["cavalry", "artillery", "infantry"]
    keys = battle["attacker"].keys +  battle["defender"].keys
    has_naval = !(keys & naval_units).empty?
    has_land = !(keys & land_units).empty?
    return :land if has_land and not has_naval
    return :naval if has_naval and not has_land
    raise "Both naval and land units present" if has_land and has_naval
    raise "Neither naval nor land units present"
  end

  def ensure_attackers_defenders_match!(battle, attackers, defenders)
    a = country_name(battle["attacker"]["country"])
    d = country_name(battle["defender"]["country"])
    return if attackers.include?(a) and defenders.include?(d)
    warn "Attackers / defenders for battle do not match ongoing war. Results might be inaccurate."
  end

  def add_war!(war, war_start, war_end=nil)
    attackers = []
    defenders = []
    attacker_losses = 0
    defender_losses = 0
    attacker_losses_ships = 0
    defender_losses_ships = 0
    battles = []
    war["history"].each do |date, event|
      # There is like weird stuff for historical wars
      next unless date.is_a?(Date)
      event.each do |event_type, event_details|
        case event_type
        when "add_attacker"
          attackers << country_name(event_details)
        when "add_defender"
          defenders << country_name(event_details)
        when "battle"
          type = battle_type(event_details)
          ensure_attackers_defenders_match!(event_details, attackers, defenders)
          if type == :land
            attacker_losses += event_details["attacker"]["losses"]
            defender_losses += event_details["defender"]["losses"]
          else
            attacker_losses_ships += event_details["attacker"]["losses"]
            defender_losses_ships += event_details["defender"]["losses"]
          end
        when "rem_attacker", "rem_defender"
          # Ignore
        else
          raise "Unknown event type `#{event_type}'"
        end
      end
    end

    @wars << {
      name: war["name"],
      start_date: war_start.to_s,
      end_date: war_end ? war_end.to_s : "ongoing",
      attackers: attackers,
      defenders: defenders,
      attacker_troops: attacker_losses,
      defender_troops: defender_losses,
      attacker_ships: attacker_losses_ships,
      defender_ships: defender_losses_ships,
    }
  end

  def add_active_war!(war)
    return if war["history"].empty?
    add_war! war,
             war["history"].keys.grep(Date).min
  end

  def add_previous_war!(war)
    return if war["history"].empty?
    add_war! war,
             war["history"].keys.grep(Date).min,
             war["history"].keys.grep(Date).max
  end

  def analyze_wars!
    @wars = []
    @save.active_wars.each do |active_war|
      add_active_war! active_war
    end
    @save.previous_wars.each do |previous_war|
      add_previous_war! previous_war
    end
  end

  def call
    analyze_wars!
    @wars.each do |war|
      p war
      # puts [war[:name], war[:start_date], war[:end_date], war[:attackers].join(","), war[:defenders].join(","), war[:attacker_losses], war[:defender_losses]].join("\t")
    end
  end
end

if $0 == __FILE__
  AnalyzeWarsBattles.new_from_argv.call
end
