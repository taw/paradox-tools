#!/usr/bin/env ruby

require_relative "./eu4_save_analysis"

class BestManufactoryPlaces < EU4SaveAnalysis
  def estimated_player_trade_value(province)
    trade_goods = province.trade_goods
    trade_node_name = province.trade_node_name
    price = @save.trade_good_prices[trade_goods]
    trade_node = @save.trade_network[trade_node_name]
    player_trade_share = trade_node.total_collector_share[@save.player_tag]
    (player_trade_share * price / 12.0).round(6)
  end

  def workshop_multiplier(province)
    if province.buildings.include?("counting_house")
      2.0
    elsif province.buildings.include?("workshop")
      1.5
    else
      1.0
    end
  end

  def estimated_production_value(province)
    # This is multiplied by a lot of things
    # - goods produced
    #   - prosperity +25%
    #   - production leader +10%
    #   - war exhaustion -X%
    #   - nearby merchant companies +X%
    #   - nearby trade companies +X%
    #   - happy burgers 10%
    #   - national ideas
    #   - furnacess
    #   - trading in coal
    # - local production efficiency
    #   - workshops [TAKEN INTO ACCOUNT]
    # - production efficiency
    #   - adm tech bonus 0% to 20%
    #   - ahead of time adm bonus 20%
    # and maybe others, for ballpark figure picking 1.50x
    1.50 * province.base_production_income * workshop_multiplier(province) * province.production_share_after_autonomy
  end

  def enabled_manufactories
    unless @enabled_manufactories
      @enabled_manufactories = Set[]
      player_tech = @save.player_country.technology
      # Hardcoded list, but could be parsed from common/buildings
      if player_tech["adm_tech"] >= 6
        @enabled_manufactories << "grain" << "livestock" << "wine"
      end
      if player_tech["adm_tech"] >= 11
        @enabled_manufactories << "cloth" << "dyes" << "silk" << "wool"
      end
      if player_tech["dip_tech"] >= 11
        @enabled_manufactories << "fish" << "naval_supplies" << "salt"
      end
      if player_tech["mil_tech"] >= 11
        @enabled_manufactories << "copper" << "iron"
      end
      if player_tech["adm_tech"] >= 14
        @enabled_manufactories << "cocoa" << "coffee" << "cotton" << "sugar" << "tea" << "tobacco"
      end
      if player_tech["dip_tech"] >= 14
        @enabled_manufactories << "fur" << "incense" << "ivory" << "slaves" << "spices"
      end
      if player_tech["adm_tech"] >= 16
        @enabled_manufactories << "chinaware" << "gems" << "glass" << "paper" << "tropical_wood"
      end
      if player_tech["adm_tech"] >= 21
        @enabled_manufactories << "coal"
      end
    end
    @enabled_manufactories
  end

  # This just analyzes trade value, not producion value
  # Wiki says these are annual values, so converitng to monthly income
  def call
    results = []
    @save.provinces.each do |id, province|
      next unless province.owner
      next if province.has_manufactory?

      trade_goods = province.trade_goods
      trade_node_name = province.trade_node_name

      # Can't build manufactory anyway
      next if trade_goods == "gold" or trade_goods == "unknown"

      # Could also include subjects
      if province.owner == @save.player_tag
        estimated_total_value = (estimated_player_trade_value(province) + estimated_production_value(province)).round(6)
      elsif @save.players_subject?(province.owner)
        estimated_total_value = estimated_player_trade_value(province).round(6)
      else
        # We could print non-subjects for conquest ideas!
        estimated_total_value = estimated_player_trade_value(province).round(6)
      end

      next if estimated_total_value == 0

      flags = ""
      flags << "[construction in progress]" if province.construction_in_progress?
      flags << "[no tech]" unless enabled_manufactories.include?(province.trade_goods)

      results << [estimated_total_value, province.name, country_name(province.owner), localization(trade_goods), "#{localization(trade_node_name)}", flags]
    end

    results.sort_by{|v,n,| [-v,n]}.each do |row|
      puts "%.6f %20s %20s %20s %30s %30s" % row
    end; nil
  end
end

if $0 == __FILE__
  BestManufactoryPlaces.new_from_argv.call
end
