#!/usr/bin/env ruby

# This is not a thing from 1.32 onwards. Script only kept for historical reasons.

require_relative "./eu4_save_analysis"

module Enumerable
  def avg
    sum / size.to_f
  end
end

class AnalyzeInstitutions < EU4SaveAnalysis
  def total_penalty(country)
    country.institutions.zip(@save.institutions_penalties).map{|i,p| (1-i)*p}.inject(0, &:+)
  end

  def countries
    @countries ||= begin
      result = []
      @save.countries.each do |tag, country|
        next if country.num_of_cities == 0
        result << {
          tag: tag,
          penalty: total_penalty(country),
          tech_group: country.technology_group,
        }
      end
      result
    end
  end

  def call
    result = countries
             .group_by{|x| x[:tech_group]}
             .map{|t,r|
               [t, r.map{|u| u[:penalty]}.avg]
             }
             .sort_by(&:last)
             .to_h
    result.each do |group, penalty|
      puts "* #{group} - #{penalty.round(3)}"
    end
  end
end

if $0 == __FILE__
  AnalyzeInstitutions.new_from_argv.call
end
